//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Projects = newProjectsTable("public", "projects", "")

type projectsTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnInteger
	Name      postgres.ColumnString
	OwnerID   postgres.ColumnInteger
	IsPublic  postgres.ColumnBool
	CreatedAt postgres.ColumnTimestamp
	LastEdit  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProjectsTable struct {
	projectsTable

	EXCLUDED projectsTable
}

// AS creates new ProjectsTable with assigned alias
func (a ProjectsTable) AS(alias string) *ProjectsTable {
	return newProjectsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProjectsTable with assigned schema name
func (a ProjectsTable) FromSchema(schemaName string) *ProjectsTable {
	return newProjectsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProjectsTable with assigned table prefix
func (a ProjectsTable) WithPrefix(prefix string) *ProjectsTable {
	return newProjectsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProjectsTable with assigned table suffix
func (a ProjectsTable) WithSuffix(suffix string) *ProjectsTable {
	return newProjectsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProjectsTable(schemaName, tableName, alias string) *ProjectsTable {
	return &ProjectsTable{
		projectsTable: newProjectsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newProjectsTableImpl("", "excluded", ""),
	}
}

func newProjectsTableImpl(schemaName, tableName, alias string) projectsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		NameColumn      = postgres.StringColumn("name")
		OwnerIDColumn   = postgres.IntegerColumn("owner_id")
		IsPublicColumn  = postgres.BoolColumn("is_public")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		LastEditColumn  = postgres.TimestampColumn("last_edit")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, OwnerIDColumn, IsPublicColumn, CreatedAtColumn, LastEditColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, OwnerIDColumn, IsPublicColumn, CreatedAtColumn, LastEditColumn}
	)

	return projectsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		OwnerID:   OwnerIDColumn,
		IsPublic:  IsPublicColumn,
		CreatedAt: CreatedAtColumn,
		LastEdit:  LastEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
