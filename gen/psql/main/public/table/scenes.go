//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Scenes = newScenesTable("public", "scenes", "")

type scenesTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	IngameID   postgres.ColumnInteger
	LocationID postgres.ColumnInteger
	Options    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScenesTable struct {
	scenesTable

	EXCLUDED scenesTable
}

// AS creates new ScenesTable with assigned alias
func (a ScenesTable) AS(alias string) *ScenesTable {
	return newScenesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScenesTable with assigned schema name
func (a ScenesTable) FromSchema(schemaName string) *ScenesTable {
	return newScenesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScenesTable with assigned table prefix
func (a ScenesTable) WithPrefix(prefix string) *ScenesTable {
	return newScenesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScenesTable with assigned table suffix
func (a ScenesTable) WithSuffix(suffix string) *ScenesTable {
	return newScenesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScenesTable(schemaName, tableName, alias string) *ScenesTable {
	return &ScenesTable{
		scenesTable: newScenesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newScenesTableImpl("", "excluded", ""),
	}
}

func newScenesTableImpl(schemaName, tableName, alias string) scenesTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		IngameIDColumn   = postgres.IntegerColumn("ingame_id")
		LocationIDColumn = postgres.IntegerColumn("location_id")
		OptionsColumn    = postgres.StringColumn("options")
		allColumns       = postgres.ColumnList{IDColumn, IngameIDColumn, LocationIDColumn, OptionsColumn}
		mutableColumns   = postgres.ColumnList{IngameIDColumn, LocationIDColumn, OptionsColumn}
	)

	return scenesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		IngameID:   IngameIDColumn,
		LocationID: LocationIDColumn,
		Options:    OptionsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
