// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: dev/v1/dev_service.proto

package devv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevServiceClient is the client API for DevService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevServiceClient interface {
	// Used to initiate a new user project
	NewProject(ctx context.Context, in *NewProjectRequest, opts ...grpc.CallOption) (*NewProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// Used to create a location for the specified project
	// Every game scene has to be linked to a certain location
	NewLocation(ctx context.Context, in *NewLocationRequest, opts ...grpc.CallOption) (*NewLocationResponse, error)
}

type devServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevServiceClient(cc grpc.ClientConnInterface) DevServiceClient {
	return &devServiceClient{cc}
}

func (c *devServiceClient) NewProject(ctx context.Context, in *NewProjectRequest, opts ...grpc.CallOption) (*NewProjectResponse, error) {
	out := new(NewProjectResponse)
	err := c.cc.Invoke(ctx, "/dev.v1.DevService/NewProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/dev.v1.DevService/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devServiceClient) NewLocation(ctx context.Context, in *NewLocationRequest, opts ...grpc.CallOption) (*NewLocationResponse, error) {
	out := new(NewLocationResponse)
	err := c.cc.Invoke(ctx, "/dev.v1.DevService/NewLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevServiceServer is the server API for DevService service.
// All implementations must embed UnimplementedDevServiceServer
// for forward compatibility
type DevServiceServer interface {
	// Used to initiate a new user project
	NewProject(context.Context, *NewProjectRequest) (*NewProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// Used to create a location for the specified project
	// Every game scene has to be linked to a certain location
	NewLocation(context.Context, *NewLocationRequest) (*NewLocationResponse, error)
	mustEmbedUnimplementedDevServiceServer()
}

// UnimplementedDevServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDevServiceServer struct {
}

func (UnimplementedDevServiceServer) NewProject(context.Context, *NewProjectRequest) (*NewProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewProject not implemented")
}
func (UnimplementedDevServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedDevServiceServer) NewLocation(context.Context, *NewLocationRequest) (*NewLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewLocation not implemented")
}
func (UnimplementedDevServiceServer) mustEmbedUnimplementedDevServiceServer() {}

// UnsafeDevServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevServiceServer will
// result in compilation errors.
type UnsafeDevServiceServer interface {
	mustEmbedUnimplementedDevServiceServer()
}

func RegisterDevServiceServer(s grpc.ServiceRegistrar, srv DevServiceServer) {
	s.RegisterService(&DevService_ServiceDesc, srv)
}

func _DevService_NewProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevServiceServer).NewProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.v1.DevService/NewProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevServiceServer).NewProject(ctx, req.(*NewProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.v1.DevService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevService_NewLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevServiceServer).NewLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.v1.DevService/NewLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevServiceServer).NewLocation(ctx, req.(*NewLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevService_ServiceDesc is the grpc.ServiceDesc for DevService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.v1.DevService",
	HandlerType: (*DevServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewProject",
			Handler:    _DevService_NewProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _DevService_DeleteProject_Handler,
		},
		{
			MethodName: "NewLocation",
			Handler:    _DevService_NewLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dev/v1/dev_service.proto",
}
